{"version":3,"sources":["constants/filterTypes.ts","constants/actionTypes.ts","actions/ActionCreator.ts","components/SearchTodos/SelectFilterType.tsx","components/SearchTodos/SearchTodos.tsx","components/AddTodo/States/AddTodoState.ts","components/AddTodo/AddTodo.tsx","components/TodoItem/TodoItem.tsx","components/TodoItems/TodoItems.tsx","components/App/App.tsx","serviceWorker.js","model/TodoItemModel.ts","model/TodoStateModel.ts","reducers/todoHandler.ts","model/HttpMethod.ts","constants/urls.ts","model/TodoRequestBody.ts","service/TodoClient.ts","model/TodoSagas.ts","model/Store.js","index.js"],"names":["FilterType","ActionTypes","ActionRequestTypes","ActionCreator","ListTodo","todos","type","AddTodo","id","name","ToggleTodo","DeleteTodo","SetFilter","filterType","filter","SetTodoFilter","RequestListTodo","RequestAddTodo","text","RequestToggleTodo","RequestDeleteTodo","RequestSetFilter","connect","state","ownProps","Checked","CurrentFilter","dispatch","props","className","value","checked","onChange","SearchTodos","All","Completed","Uncompleted","AddTodoState","Input","IsEmpty","this","Clear","SetInput","addItem","event","preventDefault","target","console","log","onSubmit","placeholder","Component","TodoItem","Id","css","Name","onClick","Todos","GetTodos","undefined","map","item","index","key","App","React","Boolean","window","location","hostname","match","TodoItemModel","Toogle","TodoState","todo","todoToToggle","find","Empty","HttpMethod","Api","Fitler","Toggle","TodoRequestBody","FromName","FromId","FromFilterType","TodoClient","ListAsync","a","request","Post","urls","AddAsync","ToogleAsync","DeleteAsync","Delete","createClient","axios","create","baseURL","headers","method","url","data","response","Instance","listTodoAsync","addTodoAsync","toogleTodoAsync","deleteTodoAsync","setTodoFilterAsync","watchAddTodoAsync","watchToogleTodoAsync","watchDeleteTodoAsync","watchSetTodoFilterAsync","watchListTodoAsync","Watch","todoClient","call","put","takeLatest","all","sagaMiddleware","createSagaMiddleware","store","createStore","action","applyMiddleware","run","TodoSagas","root","document","getElementById","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4a1f029e.chunk.js","sourcesContent":["export enum FilterType {\r\n    All,\r\n    Completed,\r\n    Uncompleted\r\n}\r\n","export enum ActionTypes {\r\n    ListTodo,\r\n    AddTodo,\r\n    ToggleTodo,\r\n    DeleteTodo,\r\n    SetTodoFilter\r\n}\r\n\r\nexport enum ActionRequestTypes {\r\n    ListTodo = 'LIST_TODOS',\r\n    AddTodo = 'ADD_TODO',\r\n    ToggleTodo = 'TOGGLE_TODO',\r\n    DeleteTodo = 'DELETE_TODO',\r\n    SetTodoFilter = 'SET_TODO_FILTER'\r\n}\r\n","import { ActionTypes, ActionRequestTypes } from '../constants/actionTypes';\r\nimport { Guid } from 'guid-typescript';\r\nimport TodoItemModel from '../model/TodoItemModel';\r\nimport { FilterType } from '../constants/filterTypes';\r\n\r\nexport class ActionCreator {\r\n\r\n    // sync\r\n    static ListTodo = (todos: TodoItemModel[]) => ({\r\n        type: ActionTypes.ListTodo,\r\n        todos: todos\r\n    })\r\n\r\n    static AddTodo = (id: Guid, name: string) => ({\r\n        id: id,\r\n        type: ActionTypes.AddTodo,\r\n        name,\r\n    })\r\n\r\n    static ToggleTodo = (id: Guid) => ({\r\n        id,\r\n        type: ActionTypes.ToggleTodo\r\n    })\r\n\r\n    static DeleteTodo = (id: Guid) => ({\r\n        id,\r\n        type: ActionTypes.DeleteTodo\r\n    })\r\n\r\n    static SetFilter = (filterType: FilterType) => ({\r\n        filter: filterType,\r\n        type: ActionTypes.SetTodoFilter\r\n    })\r\n\r\n    // async\r\n    static RequestListTodo = () => ({\r\n        type: ActionRequestTypes.ListTodo\r\n    })\r\n\r\n    static RequestAddTodo = (text: string) => ({\r\n        type: ActionRequestTypes.AddTodo,\r\n        text,\r\n    })\r\n\r\n    static RequestToggleTodo = (id: Guid) => ({\r\n        id,\r\n        type: ActionRequestTypes.ToggleTodo\r\n    })\r\n\r\n    static RequestDeleteTodo = (id: Guid) => ({\r\n        id,\r\n        type: ActionRequestTypes.DeleteTodo\r\n    })\r\n\r\n    static RequestSetFilter = (filterType: FilterType) => ({\r\n        filter: filterType,\r\n        type: ActionRequestTypes.SetTodoFilter\r\n    })\r\n}","import React, { FunctionComponent } from 'react'\r\nimport { ISelectFilterTypeProps } from './States/ISelectFilterTypeProps'\r\nimport TodoState from '../../model/TodoStateModel'\r\nimport { ISelectFilterTypeDispatch } from './States/ISelectFilterTypeDispatch'\r\nimport { ActionCreator } from '../../actions/ActionCreator'\r\nimport { connect } from 'react-redux'\r\nimport { FilterType } from '../../constants/filterTypes'\r\n\r\nconst SelectFilterType: FunctionComponent<ISelectFilterTypeProps & ISelectFilterTypeDispatch> = (props) => {\r\n    return (\r\n        <label className=\"pointer\">\r\n            <input\r\n                type=\"radio\"\r\n                name=\"filterType\"\r\n                value={props.FilterType}\r\n                checked={props.Checked}\r\n                onChange={props.SetFilter} \r\n            /> {FilterType[props.FilterType]} \r\n        </label>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state: TodoState, ownProps: ISelectFilterTypeProps): ISelectFilterTypeProps => ({\r\n    Checked: ownProps.FilterType === state.CurrentFilter,\r\n    FilterType: ownProps.FilterType,\r\n})\r\n\r\nconst mapDispatchToProps = (dispatch: any, ownProps: ISelectFilterTypeProps): ISelectFilterTypeDispatch => ({\r\n    SetFilter: () => dispatch(ActionCreator.RequestSetFilter(ownProps.FilterType))\r\n})\r\n\r\nexport default connect<ISelectFilterTypeProps, ISelectFilterTypeDispatch, ISelectFilterTypeProps, TodoState>(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(SelectFilterType);\r\n","import React, { FunctionComponent } from 'react';\r\nimport { FilterType } from '../../constants/filterTypes'\r\nimport SelectFilterType from './SelectFilterType';\r\n\r\nconst SearchTodos: FunctionComponent<{}> = () => {\r\n    return (\r\n        <div className=\"search-todos\">\r\n            <SelectFilterType \r\n                FilterType={FilterType.All}\r\n            />\r\n            <SelectFilterType\r\n                FilterType={FilterType.Completed}\r\n            />\r\n            <SelectFilterType\r\n                FilterType={FilterType.Uncompleted}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchTodos","export class AddTodoState {\r\n    Input?: string;\r\n\r\n    IsEmpty = this.Input === '';\r\n\r\n    Clear = () => {\r\n        this.Input = '';\r\n    }\r\n\r\n    SetInput = (value: string) => {\r\n        this.Input = value;\r\n    }\r\n}","import React, { Component, ChangeEvent } from 'react';\r\nimport './AddTodo.css'\r\nimport { connect } from 'react-redux'\r\nimport { IAddTodoDispatch } from './States/IAddTodoDispatch';\r\nimport { IAddTodoProps } from './States/IAddTodoProps';\r\nimport { AddTodoState } from './States/AddTodoState';\r\nimport { ActionCreator } from '../../actions/ActionCreator';\r\n\r\ntype IAddTodoComponentProps = IAddTodoProps & IAddTodoDispatch;\r\n\r\nclass AddTodo extends Component<IAddTodoComponentProps, AddTodoState> {\r\n\r\n    constructor(props: IAddTodoComponentProps) {\r\n        super(props)\r\n\r\n        this.state = new AddTodoState();\r\n    }\r\n\r\n    addItem = (event: any) => {\r\n\r\n        event.preventDefault();\r\n\r\n        if (this.state.IsEmpty) {\r\n            return;\r\n        }\r\n\r\n        this.props.AddTodo(this.state.Input);\r\n        this.state.Clear();\r\n    }\r\n\r\n    onChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n        event.preventDefault();\r\n        this.state.SetInput(event.target.value);\r\n    }\r\n\r\n    render() {\r\n\r\n        console.log(this.state);\r\n\r\n        return (<div className=\"add-todo-conainer\">\r\n            <form onSubmit={this.addItem}>\r\n                <input\r\n                    className=\"add-todo-input\"\r\n                    type=\"text\"\r\n                    placeholder=\"Task name\"\r\n                    value={this.state.Input}\r\n                    onChange={this.onChange}\r\n                />\r\n                <button\r\n                    type=\"submit\"\r\n                    className=\"add-todo-btn\">\r\n                    Add todo\r\n                </button>\r\n            </form>\r\n        </div>)\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: any):IAddTodoDispatch => ({\r\n    AddTodo: (text: string) => dispatch(ActionCreator.RequestAddTodo(text))\r\n})\r\n\r\nexport default connect(null, mapDispatchToProps)(AddTodo)","import React, { Component } from 'react';\r\nimport './TodoItem.css';\r\nimport { connect } from 'react-redux'\r\nimport { ITodoItemProps } from './States/ITodoItemProps'\r\nimport { ITodoItemDispatch } from './States/ITodoItemDispatch';\r\nimport { ActionCreator } from \"../../actions/ActionCreator\";\r\n\r\ntype ITodoItemComponentProps = ITodoItemProps & ITodoItemDispatch\r\n\r\nconst TodoItem: React.FunctionComponent<ITodoItemComponentProps> = ({TodoItem, ToggleTodo, DeleteTodo}) => {\r\n\r\n    let css = \"todo-item\";\r\n\r\n    if (TodoItem.Completed) {\r\n        css += \" todo-item-comleted\";\r\n    }\r\n    \r\n    return (<li>\r\n        <label className=\"todo-item-container pointer\">\r\n            <div className={css} >\r\n                {TodoItem.Name}\r\n            </div>\r\n            <input\r\n                type=\"checkbox\"\r\n                checked={TodoItem.Completed}\r\n                onChange={ToggleTodo}\r\n            />\r\n        </label>\r\n        <button\r\n            className=\"remove-todo-btn\"\r\n            onClick={DeleteTodo}>\r\n            Delete\r\n        </button>\r\n    </li>)\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: any, ownProps: ITodoItemProps): ITodoItemDispatch => ({\r\n    ToggleTodo: () => dispatch(ActionCreator.RequestToggleTodo(ownProps.TodoItem.Id)),\r\n    DeleteTodo: () => dispatch(ActionCreator.RequestDeleteTodo(ownProps.TodoItem.Id))\r\n})\r\n\r\nexport default connect(null, mapDispatchToProps)(TodoItem)","import { connect } from 'react-redux';\r\nimport './TodoItems.css';\r\nimport { ITodoItemsProps } from './States/ITodoItemsProps';\r\nimport TodoState from '../../model/TodoStateModel';\r\nimport React from 'react';\r\nimport SearchTodos from '../SearchTodos/SearchTodos';\r\nimport AddTodo from '../AddTodo/AddTodo';\r\nimport TodoItem from '../TodoItem/TodoItem';\r\n\r\nconst TodoItems: React.FunctionComponent<ITodoItemsProps> = ({Todos}) => {\r\n    return (\r\n        <div className=\"todo-list\">\r\n            <h4> Todo list: </h4>\r\n                <SearchTodos />\r\n                <AddTodo />\r\n                <ul>\r\n                    { \r\n                        Todos === undefined ? [] : Todos.map((item, index) =>\r\n                        <TodoItem\r\n                            key={index}\r\n                            TodoItem={item}\r\n                        />)\r\n                    }\r\n                </ul>\r\n        </div>\r\n    )\r\n}\r\n        \r\nconst mapStateToProps = (state: TodoState): ITodoItemsProps => ({\r\n    Todos: state.GetTodos()\r\n})\r\n\r\nexport default connect<ITodoItemsProps, {}, {}, TodoState>(\r\n    mapStateToProps\r\n)(TodoItems)","import React from 'react';\r\nimport TodoItems from '../TodoItems/TodoItems';\r\nimport './App.css'\r\n\r\nexport default class App extends React.Component {\r\n  render() {\r\n    return <div className=\"app\">\r\n      <TodoItems />\r\n    </div>\r\n  }\r\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import { Guid } from 'guid-typescript'\r\n\r\nexport default class TodoItemModel {\r\n    Id: Guid;\r\n    Name: string;\r\n    Completed: boolean;\r\n\r\n    constructor(id: Guid, name: string) {\r\n        this.Id = id;\r\n        this.Name = name;\r\n        this.Completed = false;\r\n    }\r\n\r\n    Toogle = () => {\r\n        this.Completed = !this.Completed;\r\n    } \r\n}","import { Guid } from 'guid-typescript';\r\nimport { FilterType } from '../constants/filterTypes';\r\nimport TodoItemModel from './TodoItemModel';\r\n\r\nexport default class TodoState {\r\n    Todos: TodoItemModel[];\r\n    CurrentFilter: FilterType;\r\n\r\n    static Empty = new TodoState([]);\r\n    \r\n    constructor(todos: TodoItemModel[]) {\r\n        this.Todos = todos;\r\n        this.CurrentFilter = FilterType.All;\r\n    }\r\n\r\n    DeleteTodo = (id: Guid) => <TodoState> {\r\n        ...this,\r\n        Todos: this.Todos.filter(todo => todo.Id !== id)\r\n    }\r\n\r\n    AddTodo = (id: Guid, name: string) => <TodoState>{ \r\n        ...this,\r\n        Todos: [\r\n            ...this.Todos, \r\n            new TodoItemModel(id, name)\r\n        ] \r\n    };\r\n\r\n    ToggleTodo = (id: Guid) => {\r\n\r\n        var todoToToggle = this.Todos.find(todo => todo.Id === id);\r\n\r\n        if (todoToToggle === undefined) {\r\n            return this;\r\n        }\r\n\r\n        todoToToggle.Toogle();\r\n\r\n        return <TodoState>{\r\n             ...this,\r\n            Todos: [...this.Todos, todoToToggle] \r\n        };\r\n    }\r\n\r\n    SetFilter = (filterType: FilterType) => <TodoState>{\r\n        ...this,\r\n        CurrentFilter: filterType\r\n    }\r\n\r\n    GetTodos = () => {\r\n        switch  (this.CurrentFilter)\r\n        {\r\n            case FilterType.Completed: {\r\n                return this.Todos.filter(todo => todo.Completed);\r\n            }\r\n            \r\n            case FilterType.Uncompleted: {\r\n                return this.Todos.filter(todo => !todo.Completed);\r\n            }\r\n\r\n            default: {\r\n                return this.Todos;\r\n            }\r\n        }\r\n    }\r\n}","import { ActionTypes} from '../constants/actionTypes'\r\nimport { AnyAction } from 'redux'\r\nimport TodoState from '../model/TodoStateModel'\r\nimport TodoItemModel from '../model/TodoItemModel'\r\n\r\nexport const todoHandler = (state: TodoState = TodoState.Empty, action: AnyAction): TodoState => {\r\n    switch (action.type) {\r\n        case ActionTypes.AddTodo:\r\n            return state.AddTodo(action.id, action.name)\r\n        case ActionTypes.ToggleTodo:\r\n            return state.ToggleTodo(action.id)\r\n        case ActionTypes.DeleteTodo:\r\n            return state.DeleteTodo(action.id)\r\n        case ActionTypes.SetTodoFilter:\r\n            return state.SetFilter(action.filter)\r\n        case ActionTypes.ListTodo:\r\n            return new TodoState(action.todos.map((todo: any) => new TodoItemModel(todo.id, todo.name)))\r\n        default:\r\n            return state;\r\n    }\r\n}","export enum HttpMethod {\r\n    Post = \"post\",\r\n    Delete = \"delete\",\r\n}","export const Api = 'api/todos';\r\nexport const Fitler = 'filter';\r\nexport const Toggle = 'toggle';\r\n\r\n\r\n","import { FilterType } from \"../constants/filterTypes\";\r\nimport { Guid } from \"guid-typescript\";\r\n\r\nexport class TodoRequestBody {\r\n    FilterType?: FilterType;\r\n    Name?: string;\r\n    Id?: Guid;\r\n\r\n    static FromName = (name: string) => {\r\n        return <TodoRequestBody>\r\n        {\r\n            Name: name\r\n        }\r\n    }\r\n\r\n    static FromId = (id: Guid) => {\r\n        return <TodoRequestBody>\r\n        {\r\n            Id: id\r\n        }\r\n    }\r\n\r\n    static FromFilterType = (filterType: FilterType) => {\r\n        return <TodoRequestBody>\r\n        {\r\n            FilterType: filterType\r\n        }\r\n    }\r\n}","import * as urls from \"../constants/urls\";\r\nimport axios from 'axios';\r\nimport { FilterType } from \"../constants/filterTypes\";\r\nimport { Guid } from \"guid-typescript\";\r\nimport { ITodoClient } from \"./ITodoClient\";\r\nimport { HttpMethod } from \"../model/HttpMethod\";\r\nimport { TodoRequestBody } from \"../model/TodoRequestBody\";\r\n\r\nexport class TodoClient implements ITodoClient {\r\n\r\n    ListAsync = async (filterType: FilterType): Promise<any> => \r\n        await this.request(HttpMethod.Post, urls.Fitler, TodoRequestBody.FromFilterType(filterType))\r\n    \r\n    AddAsync = async (name: string): Promise<any> => \r\n        await this.request(HttpMethod.Post, undefined, TodoRequestBody.FromName(name))\r\n\r\n    ToogleAsync = async (id: Guid): Promise<any> => \r\n        await this.request(HttpMethod.Post, urls.Toggle, TodoRequestBody.FromId(id))\r\n\r\n    DeleteAsync = async (id: Guid): Promise<any> =>\r\n        await this.request(HttpMethod.Delete, undefined, TodoRequestBody.FromId(id))\r\n\r\n    static Instance = (): ITodoClient => new TodoClient()\r\n\r\n    async request(method: HttpMethod, url: string | undefined = '', data: TodoRequestBody) { \r\n        try {\r\n            const response = await this.createClient()\r\n                .request({\r\n                    data: data,\r\n                    url: url,\r\n                    method: method\r\n                });\r\n            return response.data;\r\n        }\r\n        catch (error) {\r\n            console.log(error);\r\n            return [];\r\n        }\r\n    }\r\n\r\n    createClient = () => axios.create({\r\n        baseURL: urls.Api,\r\n        headers: {\r\n        'Content-Type': 'application/json'\r\n        }\r\n    })\r\n}","import { all, put, takeLatest, call, takeEvery } from 'redux-saga/effects'\r\nimport { TodoClient } from '../service/TodoClient'\r\nimport { FilterType } from '../constants/filterTypes'\r\nimport { ActionRequestTypes } from '../constants/actionTypes'\r\nimport { AnyAction } from 'redux'\r\nimport { ActionCreator } from '../actions/ActionCreator';\r\n\r\nconst todoClient = TodoClient.Instance();\r\n\r\nfunction* listTodoAsync() {\r\n    try {\r\n        let data = yield call(todoClient.ListAsync, FilterType.All);\r\n        yield put(ActionCreator.ListTodo(data));\r\n    }\r\n    catch (error) {\r\n        throw error;\r\n    }\r\n}\r\n\r\nfunction* addTodoAsync({ text }: AnyAction) {\r\n    try {\r\n        var item = yield call(todoClient.AddAsync, text);\r\n        yield put(ActionCreator.AddTodo(item.id, item.name));\r\n    }\r\n    catch (error) {\r\n        throw error;\r\n    }\r\n}\r\n\r\nfunction* toogleTodoAsync({ id }: AnyAction) {\r\n    try {\r\n        yield call(todoClient.ToogleAsync, id);\r\n        yield put(ActionCreator.ToggleTodo(id));\r\n    }\r\n    catch (error) {\r\n        throw error;\r\n    }\r\n}\r\n\r\nfunction* deleteTodoAsync({ id }: AnyAction) {\r\n    try {\r\n        yield call(todoClient.DeleteAsync, id);\r\n        yield put(ActionCreator.DeleteTodo(id));\r\n    }\r\n    catch (error) {\r\n        throw error;\r\n    }\r\n    yield put(ActionCreator.DeleteTodo(id))\r\n}\r\n\r\nfunction* setTodoFilterAsync({ filter }: AnyAction) {\r\n    yield put(ActionCreator.SetFilter(filter))\r\n}\r\n\r\nfunction* watchAddTodoAsync() {\r\n    yield takeLatest(ActionRequestTypes.AddTodo, addTodoAsync);\r\n}\r\n\r\nfunction* watchToogleTodoAsync() {\r\n    yield takeLatest(ActionRequestTypes.ToggleTodo, toogleTodoAsync);\r\n}\r\n\r\nfunction* watchDeleteTodoAsync() {\r\n    yield takeLatest(ActionRequestTypes.DeleteTodo, deleteTodoAsync);\r\n}\r\n\r\nfunction* watchSetTodoFilterAsync() {\r\n    yield takeLatest(ActionRequestTypes.SetTodoFilter, setTodoFilterAsync);\r\n}\r\n\r\nfunction* watchListTodoAsync() {\r\n    yield takeLatest(ActionRequestTypes.ListTodo, listTodoAsync);\r\n}\r\n\r\nexport function* Watch() {\r\n    yield all([\r\n        watchListTodoAsync(),\r\n        watchAddTodoAsync(),\r\n        watchToogleTodoAsync(),\r\n        watchDeleteTodoAsync(),\r\n        watchSetTodoFilterAsync()\r\n    ])\r\n}","import { createStore, applyMiddleware } from 'redux'\r\nimport { todoHandler } from '../reducers/todoHandler'\r\nimport createSagaMiddleware from 'redux-saga'\r\nimport * as TodoSagas from './TodoSagas'\r\nimport { ActionCreator } from '../actions/ActionCreator'\r\n\r\n//create saga\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\n// create store and bind saga\r\nconst store = createStore(todoHandler, applyMiddleware(sagaMiddleware));\r\n\r\n// run saga\r\nsagaMiddleware.run(TodoSagas.Watch);\r\n\r\n// request list of todos\r\nstore.dispatch(ActionCreator.RequestListTodo())\r\n\r\nexport default store","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { Provider } from 'react-redux';\r\nimport store from './model/Store';\r\n\r\nconst root = document.getElementById('root');\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>\r\n    , root);\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}