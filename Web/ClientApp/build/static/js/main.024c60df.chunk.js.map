{"version":3,"sources":["constants/actionTypes.ts","actions/actionsFactory.js","constants/filterTypes.ts","components/TodoItem/TodoItem.js","components/SearchTodos/SelectFilterType.js","components/SearchTodos/SearchTodos.js","components/AddTodo/AddTodo.js","components/TodoItems/TodoItems.js","components/App/App.js","serviceWorker.js","model/todoItem.ts","service/todoClient.ts","model/todoState.ts","constants/urls.ts","model/todoSagas.ts","model/store.js","reducers/todoHandler.ts","index.js"],"names":["ActionTypes","ActionRequestTypes","FilterType","listTodo","todos","type","ListTodo","addTodo","name","id","Date","now","AddTodo","toggleTodo","ToggleTodo","deleteTodo","DeleteTodo","setFilter","filterType","filter","SetTodoFilter","TodoItem","css","this","props","item","completed","className","checked","onChange","onClick","Component","connect","dispatch","actions","value","currentFilter","label","SearchTodos","SelectFilterType","All","Completed","state","addItem","event","preventDefault","input","onSubmit","placeholder","ref","React","text","TodoItems","renderItems","undefined","map","index","key","requestTodoList","getTodos","App","Boolean","window","location","hostname","match","Id","Name","toogle","HttpMethod","TodoState","Todos","CurrentFilter","removeTodo","todo","todoToToggle","find","Uncompleted","list","request","POST","TodoRequestBody","FromFilterType","add","FromName","toggle","FromId","remove","DELETE","method","url","data","createClient","then","response","catch","error","console","log","axios","create","baseURL","headers","listTodoAsync","addTodoAsync","toogleTodoAsync","deleteTodoAsync","setTodoFilterAsync","watchAddTodoAsync","watchToogleTodoAsync","watchDeleteTodoAsync","watchSetTodoFilterAsync","watchListTodoAsync","watch","call","todoClient","put","actionCreators","takeLatest","all","saga","createSagaMiddleware","store","createStore","action","applyMiddleware","run","todoSaga","root","document","getElementById","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.024c60df.chunk.js","sourcesContent":["export enum ActionTypes {\r\n    ListTodo,\r\n    AddTodo,\r\n    ToggleTodo,\r\n    DeleteTodo,\r\n    SetTodoFilter\r\n}\r\n\r\nexport enum ActionRequestTypes {\r\n    AddTodo = 'ADD_TODO',\r\n    ListTodo = 'LIST_TODOS',\r\n    ToggleTodo = 'TOGGLE_TODO',\r\n    DeleteTodo = 'DELETE_TODO',\r\n    SetTodoFilter = 'SET_TODO_FILTER'\r\n}\r\n","import { ActionTypes, ActionRequestTypes } from '../constants/actionTypes';\r\n\r\n// sync\r\nexport const listTodo = (todos) => ({\r\n    type: ActionTypes.ListTodo,\r\n    todos: todos\r\n})\r\n\r\nexport const addTodo = name => ({\r\n    id: Date.now(),\r\n    type: ActionTypes.AddTodo,\r\n    name,\r\n})\r\n\r\nexport const toggleTodo = id => ({\r\n    id,\r\n    type: ActionTypes.ToggleTodo\r\n})\r\n\r\nexport const deleteTodo = id => ({\r\n    id,\r\n    type: ActionTypes.DeleteTodo\r\n})\r\n\r\nexport const setFilter = filterType => ({\r\n    filter: filterType,\r\n    type: ActionTypes.SetTodoFilter\r\n})\r\n\r\n// async\r\nexport const requestListTodo = () => ({\r\n    type: ActionRequestTypes.ListTodo\r\n})\r\n\r\nexport const requestAddTodo = text => ({\r\n    id: Date.now(),\r\n    type: ActionRequestTypes.AddTodo,\r\n    text,\r\n})\r\n\r\nexport const requestToggleTodo = id => ({\r\n    id,\r\n    type: ActionRequestTypes.ToggleTodo\r\n})\r\n\r\nexport const requestDeleteTodo = id => ({\r\n    id,\r\n    type: ActionRequestTypes.DeleteTodo\r\n})\r\n\r\nexport const requestSetFilter = filterType => ({\r\n    filter: filterType,\r\n    type: ActionRequestTypes.SetTodoFilter\r\n})","export enum FilterType {\r\n    All,\r\n    Completed,\r\n    Uncompleted\r\n}\r\n","import React, { Component } from 'react';\r\nimport './TodoItem.css';\r\nimport * as actions from '../../actions/actionsFactory';\r\nimport { connect } from 'react-redux'\r\n\r\nclass TodoItem extends Component {\r\n    render() {\r\n\r\n        let css = \"todo-item\";\r\n\r\n        if (this.props.item.completed) {\r\n            css += \" todo-item-comleted\";\r\n        }\r\n\r\n        return <li>\r\n            <label className=\"todo-item-container pointer\">\r\n                <div className={css} >\r\n                    {this.props.item.name}\r\n                </div>\r\n                <input\r\n                    type=\"checkbox\"\r\n                    checked={this.props.item.completed}\r\n                    onChange={this.props.toggleTodo}\r\n                />\r\n            </label>\r\n            <button\r\n                className=\"remove-todo-btn\"\r\n                onClick={this.props.deleteTodo}>\r\n                Delete\r\n            </button>\r\n        </li>;\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, props) => {\r\n    let id = props.item.id;\r\n\r\n    return {\r\n        toggleTodo: () => dispatch(actions.requestToggleTodo(id)),\r\n        deleteTodo: () => dispatch(actions.requestDeleteTodo(id))\r\n    }\r\n}\r\n\r\nexport default connect(null, mapDispatchToProps)(TodoItem)","import React from 'react'\r\n\r\nexport default (props) => \r\n    <label className=\"pointer\">\r\n        <input\r\n            type=\"radio\"\r\n            name=\"filterType\"\r\n            value={props.filter}\r\n            checked={props.currentFilter === props.filter}\r\n            onChange={() => props.setFilter(props.filter)} \r\n        /> {props.label}: \r\n    </label>","import React, { Component } from 'react';\r\nimport { FilterType } from '../../constants/filterTypes'\r\nimport { connect } from 'react-redux'\r\nimport * as actions from '../../actions/actionsFactory'\r\nimport SelectFilterType from './SelectFilterType'\r\n\r\nclass SearchTodos extends Component {\r\n\r\n    render() {\r\n        return <div className=\"search-todos\">\r\n            <SelectFilterType\r\n                setFilter={this.props.setFilter} \r\n                currentFilter={this.props.filter}\r\n                filter={FilterType.All}\r\n                label={'All'} \r\n            />\r\n            <SelectFilterType\r\n                setFilter={this.props.setFilter} \r\n                currentFilter={this.props.filter}\r\n                filter={FilterType.Completed}\r\n                label={'Completed'}  \r\n            />\r\n            <SelectFilterType\r\n                setFilter={this.props.setFilter} \r\n                currentFilter={this.props.filter}\r\n                filter={FilterType.All}\r\n                label={'Uncompleted'}  \r\n            />\r\n        </div>\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    filter: state.filter\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    setFilter: type => dispatch(actions.requestSetFilter(type))\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SearchTodos)","import React from 'react';\r\nimport './AddTodo.css'\r\nimport { connect } from 'react-redux'\r\nimport * as actions from '../../actions/actionsFactory';\r\n\r\nclass AddTodo extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.input = '';\r\n    }\r\n\r\n    addItem = (event) => {\r\n\r\n        event.preventDefault();\r\n\r\n        if (this.input.value === '') {\r\n            return;\r\n        }\r\n\r\n        this.props.addTodo(this.input.value);\r\n\r\n        this.input.value = '';\r\n    }\r\n\r\n    render() {\r\n        return (<div className=\"add-todo-conainer\">\r\n            <form onSubmit={this.addItem}>\r\n                <input\r\n                    className=\"add-todo-input\"\r\n                    type=\"text\"\r\n                    placeholder=\"Task name\"\r\n                    ref={value => this.input = value}\r\n                />\r\n                <button\r\n                    type=\"submit\"\r\n                    className=\"add-todo-btn\">\r\n                    Add todo\r\n                </button>\r\n            </form>\r\n        </div>)\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    addTodo: text => dispatch(actions.requestAddTodo(text))\r\n})\r\n\r\nexport default connect(null, mapDispatchToProps)(AddTodo)","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport './TodoItems.css';\r\nimport TodoItem from '../TodoItem/TodoItem';\r\nimport SearchTodos from '../SearchTodos/SearchTodos';\r\nimport AddTodo from '../AddTodo/AddTodo';\r\nimport * as filterTypes from '../../constants/filterTypes'\r\nimport * as actionFactory from '../../actions/actionsFactory'\r\n\r\nclass TodoItems extends React.Component {\r\n\r\n    componentDidMount() {\r\n        this.props.requestTodoList()\r\n    }\r\n\r\n    renderItems = () =>\r\n        <ul>\r\n            { this.props.todos === undefined ? [] : this.props.todos.map((item, index) =>\r\n                <TodoItem\r\n                    key={index}\r\n                    item={item}\r\n                />)}\r\n        </ul>\r\n    render() {\r\n        return <div className=\"todo-list\">\r\n            <h4> Todo list: </h4>\r\n            <SearchTodos />\r\n            <AddTodo />\r\n            {this.renderItems()}\r\n        </div >\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    todos: state.getTodos()\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    requestTodoList: () => dispatch(actionFactory.requestListTodo())\r\n})\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(TodoItems)","import React from 'react';\r\nimport TodoItems from '../TodoItems/TodoItems';\r\nimport './App.css'\r\n\r\nexport default class App extends React.Component {\r\n  render() {\r\n    return <div className=\"app\">\r\n      <TodoItems />\r\n    </div>\r\n  }\r\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import { Guid } from 'guid-typescript'\r\n\r\nexport default class TodoItem {\r\n    Id: Guid;\r\n    Name: string;\r\n    Completed: boolean;\r\n\r\n    constructor(id: Guid, name: string) {\r\n        this.Id = id;\r\n        this.Name = name;\r\n        this.Completed = false;\r\n    }\r\n\r\n    toogle = () => {\r\n        this.Completed = !this.Completed;\r\n    } \r\n}","import * as urls from \"../constants/urls\";\r\nimport axios from 'axios';\r\nimport { FilterType } from \"../constants/filterTypes\";\r\nimport { Guid } from \"guid-typescript\";\r\n\r\nexport const list = (filterType : FilterType) => request(HttpMethod.POST, urls.Fitler, TodoRequestBody.FromFilterType(filterType))\r\n\r\nexport const add = (name: string) => request(HttpMethod.POST, undefined, TodoRequestBody.FromName(name))\r\n\r\nexport const toggle = (id: Guid) => request(HttpMethod.POST, urls.Toggle, TodoRequestBody.FromId(id))\r\n\r\nexport const remove = (id: Guid) => request(HttpMethod.DELETE, undefined, TodoRequestBody.FromId(id))\r\n\r\nconst request = (method: HttpMethod, url: string | undefined = '', data: TodoRequestBody) => createClient()\r\n    .request({\r\n        data: data,\r\n        url: url,\r\n        method: HttpMethod.DELETE\r\n    })\r\n    .then(response => response.data)\r\n    .catch(error => {\r\n        console.log(error)\r\n        return [];\r\n    })\r\n\r\nconst createClient = () => axios.create({\r\n    baseURL: urls.Api,\r\n    headers: {\r\n        'Content-Type': 'application/json'\r\n    }\r\n})\r\n\r\nenum HttpMethod {\r\n    POST = \"post\",\r\n    DELETE = \"delete\",\r\n}\r\n\r\nclass TodoRequestBody {\r\n    FilterType?: FilterType;\r\n    Name?: string;\r\n    Id?: Guid;\r\n\r\n    static FromName = (name: string) => {\r\n        return <TodoRequestBody>\r\n        {\r\n            Name: name\r\n        }\r\n    }\r\n\r\n    static FromId = (id: Guid) => {\r\n        return <TodoRequestBody>\r\n        {\r\n            Id: id\r\n        }\r\n    }\r\n\r\n    static FromFilterType = (filterType: FilterType) => {\r\n        return <TodoRequestBody>\r\n        {\r\n            FilterType: filterType\r\n        }\r\n    }\r\n}","import TodoItem from './todoItem';\r\nimport { Guid } from 'guid-typescript';\r\nimport { FilterType } from '../constants/filterTypes';\r\n\r\nexport default class TodoState {\r\n    Todos: TodoItem[];\r\n    CurrentFilter: FilterType;\r\n    \r\n    constructor(todos: TodoItem[]) {\r\n        this.Todos = todos;\r\n        this.CurrentFilter = FilterType.All;\r\n    }\r\n\r\n    removeTodo = (id: Guid) => <TodoState> {\r\n        ...this,\r\n        Todos: this.Todos.filter(todo => todo.Id !== id)\r\n    }\r\n\r\n    addTodo = (id: Guid, name: string) => <TodoState>{ \r\n        ...this,\r\n        Todos: [\r\n            ...this.Todos, \r\n            new TodoItem(id, name)\r\n        ] \r\n    };\r\n\r\n    toggleTodo = (id: Guid) => {\r\n\r\n        var todoToToggle = this.Todos.find(todo => todo.Id === id);\r\n\r\n        if (todoToToggle === undefined) {\r\n            return this;\r\n        }\r\n\r\n        todoToToggle.toogle();\r\n\r\n        return <TodoState>{\r\n             ...this,\r\n            Todos: [...this.Todos, todoToToggle] \r\n        };\r\n    }\r\n\r\n    setFilter = (filterType: FilterType) => <TodoState>{\r\n        ...this,\r\n        CurrentFilter: filterType\r\n    }\r\n\r\n    getTodos = () => {\r\n        switch  (this.CurrentFilter)\r\n        {\r\n            case FilterType.Completed: {\r\n                return this.Todos.filter(todo => todo.Completed);\r\n            }\r\n            \r\n            case FilterType.Uncompleted: {\r\n                return this.Todos.filter(todo => !todo.Completed);\r\n            }\r\n\r\n            default: {\r\n                return this.Todos;\r\n            }\r\n        }\r\n    }\r\n}","export const Api = 'api/todos';\r\nexport const Fitler = 'filter';\r\nexport const Toggle = 'toggle';\r\n\r\n\r\n","import { all, put, takeLatest, call, takeEvery } from 'redux-saga/effects'\r\nimport * as actionCreators from '../actions/actionsFactory'\r\nimport * as todoClient from '../service/todoClient'\r\nimport { FilterType } from '../constants/filterTypes'\r\nimport { ActionRequestTypes } from '../constants/actionTypes'\r\nimport { AnyAction } from 'redux'\r\n\r\nfunction* listTodoAsync() {\r\n    try {\r\n        let data = yield call(todoClient.list, FilterType.All);\r\n        yield put(actionCreators.listTodo(data));\r\n    }\r\n    catch (error) {\r\n        throw error;\r\n    }\r\n}\r\n\r\nfunction* addTodoAsync({ text }: AnyAction) {\r\n    try {\r\n        yield call(todoClient.add, text);\r\n        yield put(actionCreators.addTodo(text));\r\n    }\r\n    catch (error) {\r\n        throw error;\r\n    }\r\n}\r\n\r\nfunction* toogleTodoAsync({ id }: AnyAction) {\r\n    try {\r\n        yield call(todoClient.toggle, id);\r\n        yield put(actionCreators.toggleTodo(id));\r\n    }\r\n    catch (error) {\r\n        throw error;\r\n    }\r\n}\r\n\r\nfunction* deleteTodoAsync({ id }: AnyAction) {\r\n    try {\r\n        yield call(todoClient.remove, id);\r\n        yield put(actionCreators.deleteTodo(id));\r\n    }\r\n    catch (error) {\r\n        throw error;\r\n    }\r\n    yield put(actionCreators.deleteTodo(id))\r\n}\r\n\r\nfunction* setTodoFilterAsync({ filter }: AnyAction) {\r\n    yield put(actionCreators.setFilter(filter))\r\n}\r\n\r\nfunction* watchAddTodoAsync() {\r\n    yield takeLatest(ActionRequestTypes.AddTodo, addTodoAsync);\r\n}\r\n\r\nfunction* watchToogleTodoAsync() {\r\n    yield takeLatest(ActionRequestTypes.ToggleTodo, toogleTodoAsync);\r\n}\r\n\r\nfunction* watchDeleteTodoAsync() {\r\n    yield takeLatest(ActionRequestTypes.DeleteTodo, deleteTodoAsync);\r\n}\r\n\r\nfunction* watchSetTodoFilterAsync() {\r\n    yield takeLatest(ActionRequestTypes.SetTodoFilter, setTodoFilterAsync);\r\n}\r\n\r\nfunction* watchListTodoAsync() {\r\n    yield takeLatest(ActionRequestTypes.ListTodo, listTodoAsync);\r\n}\r\n\r\nexport function* watch() {\r\n    yield all([\r\n        watchListTodoAsync(),\r\n        watchAddTodoAsync(),\r\n        watchToogleTodoAsync(),\r\n        watchDeleteTodoAsync(),\r\n        watchSetTodoFilterAsync()\r\n    ])\r\n} ","import { createStore, applyMiddleware } from 'redux'\r\nimport { todoHandler } from '../reducers/todoHandler'\r\nimport createSagaMiddleware from 'redux-saga'\r\nimport * as todoSaga from '../model/todoSagas'\r\n\r\n//create saga\r\nconst saga = createSagaMiddleware();\r\n\r\n// create store and bind saga\r\nconst store = createStore(todoHandler, applyMiddleware(saga));\r\n\r\n// run saga\r\nsaga.run(todoSaga.watch);\r\n\r\nexport default store","import { ActionTypes} from '../constants/actionTypes'\r\nimport { AnyAction } from 'redux'\r\nimport TodoState from '../model/todoState'\r\n\r\nexport const todoHandler = (state: TodoState, action: AnyAction) => {\r\n    switch (action.type) {\r\n        case ActionTypes.AddTodo:\r\n            return state.addTodo(action.id, action.name)\r\n        case ActionTypes.ToggleTodo:\r\n            return state.toggleTodo(action.id)\r\n        case ActionTypes.DeleteTodo:\r\n            return state.removeTodo(action.id)\r\n        case ActionTypes.SetTodoFilter:\r\n            return state.setFilter(action.filter)\r\n        case ActionTypes.ListTodo:\r\n            return new TodoState(action.todos)\r\n        default:\r\n            return state;\r\n    }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { Provider } from 'react-redux';\r\nimport store from './model/store';\r\n\r\nconst root = document.getElementById('root');\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>\r\n    , root);\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}